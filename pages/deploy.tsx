import type { NextPage } from 'next'
import Head from 'next/head'
import { useFormStateProvider } from 'context'
import { useAccount } from 'wagmi'
import { useCurationFactory } from '@public-assembly/curation-interactions'
import { IoIosArrowRoundForward } from 'react-icons/io'
import { Header } from '../components/Header'
import { HeroText } from 'components/HeroText'

type initialListings = any[]

// Goerli curator factory address
const curatorFactoryAddress = '0xcc0ddff0ea076AbfB837117C5AaC6f48483e5B98'
const initialPause = false
const curationLimit = 0
const metadataRenderer = '0x0000000000000000000000000000000000000000'
const metadataRendererInit = '0x'

const Deploy: NextPage = () => {
  const { title, symbol, curationPass, media } = useFormStateProvider()
  const { address } = useAccount()

  const curationManagerAddress = address as string
  const curatorTitle = title as string
  const curatorSymbol = symbol as string
  const tokenPassAddress = curationPass as string
  const initialListings = [] as initialListings

  if ((media as string) == '') {
    initialListings.push('')
  } else {
    initialListings.push([
      Object.values({
        curatedAddress: media,
        selectedTokenId: 0,
        curator: address,
        curationTargetType: 1,
        sortOrder: 0,
        hasTokenId: false,
        chainId: 4,
      }),
    ])
  }

  // const initialListings = [
  //   Object.values({
  //     curatedAddress: media,
  //     selectedTokenId: 0,
  //     curator: address,
  //     curationTargetType: 1,
  //     sortOrder: 0,
  //     hasTokenId: false,
  //     chainId: 4,
  //   }),
  // ]

  const {
    deployConfig,
    deployConfigError,
    deployWrite,
    deployWriteError,
    txnDeployStatus,
  } = useCurationFactory({
    curatorFactoryAddress,
    curationManagerAddress,
    curatorTitle,
    curatorSymbol,
    tokenPassAddress,
    initialPause,
    curationLimit,
    metadataRenderer,
    metadataRendererInit,
    initialListings,
  })

  console.log('Deploy Config: ', deployConfig)
  console.log('Config Error: ', deployConfigError)
  console.log('Write Error: ', deployWriteError)

  return (
    <div>
      <Head>
        {/*
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        */}
      </Head>
      <Header route="./inputMedia" />
      <div className="mx-6 mt-20 sm:mt-16 sm:mx-8">
        <HeroText text={<>Ready to curate&nbsp;</>} highlight={`${title}?`} />
        <div></div>
        <div className="flex w-full justify-end pt-24 pr-16">
          <div className="flex items-center">
            <div className="mr-1 mt-1">
              <IoIosArrowRoundForward size={48} />
            </div>
            <button
              className="pa-paragraph text-xl sm:text-2xl"
              onClick={() => deployWrite?.()}>
              <strong className="text-[#0c1413] hover:text-[#ecf1f0]">Deploy</strong> your
              contract
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Deploy
